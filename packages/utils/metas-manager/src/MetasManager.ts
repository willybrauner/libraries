import { DEFAULT_META_TAGS } from "./defaultMetaTags";
const debug = require("debug")("lib:MetasManager");

/**
 * IMetas properties type
 */
type TMetaTagProperty = {
  selectorAttr: string;
  selectorValue: string;
  attr: string;
};

/**
 * IMetas interface
 */
type TMetaType = string | TMetaTagProperty[];

type TMetaTags = {
  title?: TMetaType;
  description?: TMetaType;
  imageUrl?: TMetaType;
  siteName?: TMetaType;
  pageUrl?: TMetaType;
  author?: TMetaType;
  keywords?: TMetaType;
  viewport?: TMetaType;
  canonical?: TMetaType;
  // allow to add any others meta types
  [x: string]: TMetaType;
};

/**
 * @name MetasManager
 * @description Manage metas document head
 * In order to use this manager, title need be set in each page.
 *
 * Use manager as singleton
 * ex:
 *  MetasManager.inject({ title:"...", description:"...", ... })
 *
 */
class MetasManager {
  private _metaTags: TMetaTags;
  private static AUTO_GENERATE_ATTR = "auto-generated";

  /**
   * Start constructor
   * @param defaultMetasTags
   */
  constructor(defaultMetasTags = DEFAULT_META_TAGS) {
    this._metaTags = defaultMetasTags;
  }

  /**
   * Singleton
   */
  protected static _instance: MetasManager;
  public static get instance(): MetasManager {
    if (MetasManager._instance == null) {
      MetasManager._instance = new MetasManager();
    }
    return MetasManager._instance;
  }

  /**
   * Prevent non string return
   * @param metaValue
   */
  private static checkValue(metaValue): string {
    return metaValue === undefined ||
      (typeof metaValue === "object" && metaValue !== null)
      ? ""
      : metaValue;
  }
  /**
   * Select Meta value
   */
  private static selectMetaValue(
    customMetasValue: TMetaTags,
    pType: string
  ): string {
    return MetasManager.checkValue(customMetasValue?.[pType]) || "";
  }

  /**
   * @name inject
   * @description Inject metas tag elements in document <head>
   *
   * @param customMetaValues
   * @param autoCreateMetaTag: Auto create meta tag if it doesn't exist in <head>
   * @param autoRemoveMetaTag: Auto remove meta tag if is value is ""
   * @param metaTags: Meta tags properties to inquire or create
   */
  public inject(
    customMetaValues: TMetaTags = null,
    autoCreateMetaTag: boolean = true,
    autoRemoveMetaTag: boolean = true,
    metaTags: TMetaTags = this._metaTags
  ): void {
    // specific case: update main document title
    document.title = MetasManager.selectMetaValue(customMetaValues, "title");

    // loop on metasTags keys (ex: title, description, imageUrl, siteName...)
    Object.keys(metaTags).forEach((metaType: string) => {
      // select meta value with preference order.
      let metaValue = MetasManager.selectMetaValue(customMetaValues, metaType);

      // target properties {selector, setAttr} of this specific meta type
      const propertiesMetaType = metaTags[metaType] as TMetaTagProperty[];

      // for each properties of this specific meta type
      for (let property of propertiesMetaType) {
        // format selector
        const selector = `[${property.selectorAttr}="${property.selectorValue}"]`;

        // if tag element exist
        if (document.head.querySelector(selector) != null) {
          //
          if (autoRemoveMetaTag && metaValue === "") {
            debug(`el to remove`, document.head.querySelector(selector));
            document.head.querySelector(selector).remove();
          } else {
            // set meta in tag element
            document.head
              .querySelector(selector)
              .setAttribute(property.attr, metaValue);
          }
        }
        // if tag element doesn't exist and we need to create element
        else if (autoCreateMetaTag) {
          if (!metaValue) {
            debug(
              `"There is no value to set in meta attr type ${metaType}, return."`,
              metaValue
            );
            return;
          }

          debug(`Create <meta> tag...`);
          const newTagElement = document.createElement("meta");
          newTagElement.setAttribute(
            property.selectorAttr,
            property.selectorValue
          );

          newTagElement.setAttribute(property.attr, metaValue);
          newTagElement.setAttribute(MetasManager.AUTO_GENERATE_ATTR, "true");
          const autoGeneratedMetaElement = document.head.querySelectorAll(
            `*[${MetasManager.AUTO_GENERATE_ATTR}]`
          );

          // if there is no meta auto-generated, insert after <title>
          // prettier-ignore
          if (autoGeneratedMetaElement?.length === 0) {
            debug('There is non auto-generated meta in document head, insert after title');
            const documentTitle = document.getElementsByTagName("title")[0];
            document.head.insertBefore(newTagElement, documentTitle.nextSibling)

          // if there is meta auto-generated, insert after the last one
          } else {
            debug("Get last auto-generated meta tag in document head and insert newTag after it.");
            const lastAutoGeneratedMeta = autoGeneratedMetaElement[autoGeneratedMetaElement.length - 1];
            lastAutoGeneratedMeta.parentNode.insertBefore(newTagElement, lastAutoGeneratedMeta.nextSibling);
          }
        } else {
          debug(
            `Tag element doesn't exist but, createElement is set to false, do nothing, return.`
          );
          return;
        }
      }
    });
  }
}

export {
  TMetaTagProperty,
  TMetaTags,
  TMetaType,
  DEFAULT_META_TAGS,
  MetasManager,
};
